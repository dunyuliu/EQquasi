#! /usr/bin/env python3
"""
Script to setup the case via user_defined_params.py.
"""
from user_defined_params import par
import netCDF4 as nc
import numpy as np
import os

def create_model_input_file():
    # Function to create model.txt used by EQquasi.
    with open('model.txt', 'w') as f:
        f.write(str(par.fxmin) + "  " + str(par.fxmax) + "\n")
        f.write(str(par.fymin) + "  " + str(par.fymax) + "\n")
        f.write(str(par.fzmin) + "  " + str(par.fzmax) + "\n")
        f.write(str(par.xminc) + "  " + str(par.xmaxc) + "  " + str(par.zminc) + "\n")
        f.write(str(par.nuni_y_plus) + "  " + str(par.nuni_y_minus) + "\n")
        f.write(str(par.enlarging_ratio) + "\n")
        f.write(str(par.dx) + "\n")
        f.write(str(par.vp) + "  " + str(par.vs) + "  " + str(par.rou) + "\n")
        f.write(str(par.rough_fault) + "\n")
        f.write(str(par.rheology) + "\n")
        f.write(str(par.friclaw) + "\n")
        f.write(str(par.ntotft) + "\n")
        f.write(str(par.bp) + "\n")
        f.write(str(par.xi) + "  " + str(par.minDc) + "\n")
        f.write(str(par.exit_slip_rate) + "\n")
        f.write(str(par.far_vel_load) + "\n")
        f.write(str(par.creep_slip_rate) + "\n")
        f.write(str(par.init_norm) + "\n")
        f.write(str(par.solver) + "\n")
        f.write(str(par.az_op) + "\n")
        f.write(str(par.az_maxiter) + "\n")
        f.write(str(par.az_tol) + "\n")
        f.write(str(par.nt_out) + "\n")
        f.write(str(par.mode) + "\n")
        f.write(str(par.nstep) + "\n")

def create_station_input_file():
    # Function to create model.txt used by EQquasi.
    with open('stations.txt', 'w') as f:
        f.write(str(par.n_off_fault) + "\n")
        f.write(str(par.n_on_fault) + "\n")
        f.write(str(" ") + "\n")
        for i in range(len(par.st_coor_on_fault)):
            f.write(str(par.st_coor_on_fault[i][0]) + " " + str(par.st_coor_on_fault[i][1]) + "\n")
        f.write(str(" ") + "\n")
        for i in range(len(par.st_coor_off_fault)):
            f.write(str(par.st_coor_off_fault[i][0]) + " " + str(par.st_coor_off_fault[i][1]) + " " + str(par.st_coor_off_fault[i][2]) + "\n")

def netcdf_write_on_fault_vars():
  # Function to on_fault_vars input used by EQquasi.
  ds = nc.Dataset("on_fault_vars_input.nc", "w", format="NETCDF4")
  dip = ds.createDimension('dip', par.nfz)
  strike = ds.createDimension('strike', par.nfx)
  dip_var = ds.createVariable('dip', np.float64, ('dip',))
  strike_var = ds.createVariable('strike', np.float64, ('strike',))
  var0 = ds.createVariable('a', np.float64, ('dip','strike',))
  var1 = ds.createVariable('b', np.float64, ('dip','strike',))
  var2 = ds.createVariable('Dc', np.float64, ('dip','strike',))
  var3 = ds.createVariable('v0', np.float64, ('dip','strike',))
  var4 = ds.createVariable('r0', np.float64, ('dip','strike',))
  var5 = ds.createVariable('init_slip_rate', np.float64, ('dip','strike',))
  var6 = ds.createVariable('init_shear_stress', np.float64, ('dip','strike',))
  var7 = ds.createVariable('init_normal_stress', np.float64, ('dip','strike',))
  var8 = ds.createVariable('init_state', np.float64, ('dip','strike',))
  var0.units = 'unit'
  var1.units = 'unit'
  var2.units = 'meters'
  var3.units = 'm/s'
  var4.units = 'unit'
  var5.units = 'm/s'
  var6.units = 'Pa'
  var7.units = 'Pa'
  var8.units = 'unit'
  strike_var[:] = par.fx[:]
  dip_var[:] = par.fz[:]
  var0[:,:] = par.on_fault_vars[:,:,9]
  var1[:,:] = par.on_fault_vars[:,:,10]
  var2[:,:] = par.on_fault_vars[:,:,11]
  var3[:,:] = par.on_fault_vars[:,:,12]
  var4[:,:] = par.on_fault_vars[:,:,13]
  var5[:,:] = par.on_fault_vars[:,:,46]
  var6[:,:] = par.on_fault_vars[:,:,8]
  var7[:,:] = par.on_fault_vars[:,:,7]
  var8[:,:] = par.on_fault_vars[:,:,20]
  ds.close()
  
def create_batch_script():
    # Function to create batch script used by HPC system.
    with open("batch.hpc", "w") as f:
        f.write("#! /bin/bash" + "\n")
        f.write("#SBATCH -J " + str(par.casename) + "\n")
        f.write("#SBATCH -o a.eqquasi.log%j" + "\n")
        f.write("#SBATCH -N " + str(par.HPC_nnode) + "\n")
        f.write("#SBATCH -n " + str(par.HPC_ncpu) + "\n")
        f.write("#SBATCH -p " + str(par.HPC_queue) + "\n")
        f.write("#SBATCH -t " + str(par.HPC_time) + "\n")
        f.write("#SBATCH -A " + str(par.HPC_account) + "\n")
        f.write("#SBATCH --mail-user=" + str(par.HPC_email) + "\n")
        f.write("#SBATCH --mail-type=begin" + "\n")
        f.write("#SBATCH --mail-type=end" + "\n")
        f.write("  module load mumps"     + "\n")
        # Executable part.
        f.write("for i in $(seq " + str(par.istart) + " " + str(par.iend) + ");" + "\n")
        f.write("do" + "\n")
        f.write("  echo $i > currentcycle.txt" + "\n")
        f.write("  ibrun eqquasi" + "\n")
        f.write("  mkdir \"./Q$((i-1))\"" + "\n")
        f.write("  mv fltst* srfst* tdyna* global* p1* p2* disp.* fault.* cplot* \"./Q$((i-1))\"" + "\n")
        f.write("  cp \"./Q$((i-1))/\"*.r.nc ./" + "\n")
        f.write("  cd \"./Q$((i-1))/\"" + "\n")
        f.write("  ../plotOnFaultVars"+"\n")
        f.write("  cd .."+"\n")
        f.write("done" + "\n")
        # End excutable part.

def create_run_sh():
    # Function to create batch script used by HPC system.
    with open("run.sh", "w") as f:
        # Executable part.
        f.write("for i in $(seq " + str(par.istart) + " " + str(par.iend) + ");" + "\n")
        f.write("do" + "\n")
        f.write("  echo $i > currentcycle.txt" + "\n")
        f.write("  mpirun.openmpi -np " + str(par.HPC_ncpu) + " eqquasi" +"\n")
        f.write("  mkdir \"./Q$((i-1))\"" + "\n")
        f.write("  mv fltst* srfst* tdyna* global* p1* p2* disp.* fault.* cplot* \"./Q$((i-1))\"" + "\n")
        f.write("  cp \"./Q$((i-1))/\"*.r.nc ./" + "\n")
        f.write("done" + "\n")
        # End excutable part.

def create_batch_script_cycle():
    # Function to create batch script - batch.cycle.hpc - for cycle simulations used by HPC system.
    # Compared to batch.hpc, we don't do cycle id looping here. 
    with open("batch.cycle.eqquasi.hpc", "w") as f:
        f.write("#! /bin/bash"                      + "\n")
        f.write("#SBATCH -J " + str(par.casename)       + "\n")
        f.write("#SBATCH -o a.eqquasi.log%j"        + "\n")
        f.write("#SBATCH -N " + str(par.HPC_nnode)      + "\n")
        f.write("#SBATCH -n " + str(par.HPC_ncpu)       + "\n")
        f.write("#SBATCH -p " + str(par.HPC_queue)      + "\n")
        f.write("#SBATCH -t " + str(par.HPC_time)       + "\n")
        f.write("#SBATCH -A " + str(par.HPC_account)    + "\n")
        f.write("#SBATCH --mail-user=" + str(par.HPC_email) + "\n")
        f.write("#SBATCH --mail-type=begin"         + "\n")
        f.write("#SBATCH --mail-type=end"           + "\n")
        # Executable part.
        f.write("  module load mumps"               + "\n")
        f.write("  read i < currentcycle.txt"       + "\n")
        f.write("# fetch input files from /eqquasi" + "\n")
        f.write("  cp eqquasi/model.txt ./"         + "\n")
        f.write("  cp eqquasi/stations.txt ./"      + "\n")
        f.write("  cp eqquasi/rough_geo_cycle.txt ./"      + "\n")
        f.write("  cp eqquasi/on_fault_vars_input.nc ./" + "\n")
        f.write("# if cycle id>1, then fetch fault.dyna.r.nc from D(i-2)" + "\n")
        f.write("  if ((i > 1))"                    + "\n")
        f.write("  then"                            + "\n")
        f.write("    echo 'Simulating cycle ' $i '... ...'"  + "\n")
        f.write("    cp -r \"D$((i-2))/\"fault.dyna.r.nc ./" + "\n")
        f.write("    cp -r fault.dyna.r.nc fault.r.nc"       + "\n")
        f.write("  fi"                                       + "\n")
        f.write("# run eqquasi"                     + "\n")
        f.write("  ibrun eqquasi"                   + "\n")
        f.write("# move results to Q(i-1)"          + "\n")
        f.write("# delete Q(i-1)"                   + "\n")
        f.write("  rm -rf \"Q$((i-1))\""            + "\n")
        f.write("# create Q(i-1) and copy results and inputs over" + "\n")
        f.write("  mkdir \"Q$((i-1))\""             + "\n")
        f.write("  cp -r a.eqquasi.log* \"Q$((i-1))\""         + "\n")
        f.write("  cp -r on_fault_vars_input.nc \"Q$((i-1))\"" + "\n")
        f.write("  cp -r currentcycle.txt \"Q$((i-1))\""       + "\n")
        f.write("  cp -r fltst* srfst* tdyna* \"Q$((i-1))\""   + "\n")
        f.write("  cp -r global* p1* p2* disp.* \"Q$((i-1))\"" + "\n")
        f.write("  cp -r rough* \"Q$((i-1))\"" + "\n")
        f.write("  cp -r fault.* cplot* \"Q$((i-1))\""         + "\n")
        f.write("  cp -r eqquasi/plot_on_fault_vars2 \"Q$((i-1))\"" + "\n")
        f.write("  cp -r eqquasi/user_defined_params.py \"Q$((i-1))\"" + "\n")
        f.write("  cp -r eqquasi/lib.py \"Q$((i-1))\""                 + "\n")
        f.write("# clean up the root for running eqdyna"               + "\n")
        f.write("  rm -rf a.eqquasi.log* model.txt stations.txt"       + "\n")
        f.write("  rm -rf on_fault_vars_input.nc"                      + "\n")
        f.write("  rm -rf fltst* srfst* tdyna* global* p1* p2* disp.*" + "\n")
        f.write("  rm -rf fault.* cplot* "                             + "\n")
        f.write("  rm -rf eqquasi.mesh.*"                              + "\n")
        f.write("# postprocessing"                                     + "\n")
        f.write("  cd \"Q$((i-1))\""                                   + "\n")
        f.write("  ibrun -np 1 python plot_on_fault_vars2"             + "\n")
        f.write("  cd .."                                              + "\n")
        # End excutable part.

def estimate_HPC_resource():
    nx = round((par.fxmax-par.fxmin)/par.dx)
    nz = round((par.fzmax-par.fzmin)/par.dz)
    ncell = nx*nz*(par.nuni_y_plus + par.nuni_y_minus)*2
    estimate_ncpu = int(ncell/10000)
    estimate_nnode = int(estimate_ncpu/128) + 1
    print("Estimated total cells in the model is " + str(ncell))
    print("Estimated number of computing nodes to be requested is " + str(estimate_nnode))
    print("Estimated number of CPUs to be requested is " + str(estimate_ncpu))

def _main_func(description):
  create_model_input_file()
  create_batch_script()
  create_batch_script_cycle()
  create_run_sh()
  create_station_input_file()
  estimate_HPC_resource()
  netcdf_write_on_fault_vars()
  if par.insertFaultType>0:
      os.system('./generateFaultInterface')

if __name__ == "__main__":
    _main_func(__doc__)
