#! /usr/bin/env python3
"""
Script to plot on fault variables.
"""

import xarray as xr
import matplotlib.pyplot as plt
import numpy as np
import os, glob, re, imageio
from pdf2image import convert_from_path
from user_defined_params import par

#
SMALL_SIZE = 10
r = 10e6 # half range to show stresses in Pa.
mn = par.init_norm # initial normal stress
ms = -mn*par.fric_rsf_r0 # initial mean shear stress for plotting.
md = 0 # initial mean shear dip stress

def plot_fault(fname):
  a = xr.open_dataset(fname)
  #print (a)
  shear_strike = a.shear_strike
  shear_dip    = a.shear_dip
  norm         = a.effective_normal
  slip_rate    = a.slip_rate + 1e-30
  state        = a.state_variable 
  state2       = a.state_normal

  b = np.loadtxt('global.dat')
  cumulativeTime = np.cumsum(b[:,0])
  secondToDayConst = 24*60*60
  secondToYearConst = 365*24*60*60
  cumulativeTimeInDays = cumulativeTime/secondToDayConst

  #n1 = re.findall(r'\d+',fname)
  #nstep = int(n1[0])
  nstep = int(''.join(filter(str.isdigit,fname)))

  fig1 = plt.figure(figsize=(18,9))
  plt.rc('font', size=SMALL_SIZE)

  ax11 = fig1.add_subplot(3,3,1)
  shear_strike.plot(vmin=ms-r, vmax=ms+r, extend = 'both')
  ax11.set_xlabel('')
  #ax11.set_ylabel('')

  ax12 = fig1.add_subplot(3,3,2)
  shear_dip.plot(vmin=md-r, vmax=md+r, extend = 'both')
  ax12.set_xlabel('')
  ax12.set_ylabel('')
  ax12.set_title(str(fname))

  ax13 = fig1.add_subplot(3,3,3)
  norm.plot(vmin=mn-r, vmax = mn+r, extend = 'both')
  ax13.set_ylabel('')
  ax13.set_ylabel('')

  ax21 = fig1.add_subplot(3,3,4)
  log10_slip_rate = np.log10(slip_rate)
  log10_slip_rate.rename('log10_slip_rate')
  #log10_slip_rate.rename(name_dict = {"slip_rate":"log10(slip_rate)"})
  log10_slip_rate.plot(vmin=-20, vmax=2, extend = 'both')
  #ax21.set_ylabel('')

  ax22 = fig1.add_subplot(3,3,5)
  state2.plot(vmin=-mn-r, vmax=-mn+r, extend = 'both' )
  ax22.set_ylabel('')

  ax23 = fig1.add_subplot(3,3,6)
  log10_state     = np.log10(state)
  log10_state.plot(vmin = 0, vmax = 10, extend = 'both')
  ax23.set_ylabel('')

  ax31 = fig1.add_subplot(3,3,7)
  ax31.plot(b[:,1])
  ax31.plot(nstep-1,b[nstep-1,1],'ro',markersize=10)
  ax31.set_xlabel('Time Steps')
  ax31.set_ylabel('Peak Slip Rate (m/s)')

  ax31 = fig1.add_subplot(3,3,8)
  ax31.plot(np.log10(b[:,1]))
  ax31.plot(nstep-1,np.log10(b[nstep-1,1]),'ro',markersize=10)
  ax31.set_xlabel('Time Steps')
  ax31.set_ylabel('Log10(Peak Slip Rate (m/s))')

  ax31 = fig1.add_subplot(3,3,9)
  ax31.plot(cumulativeTimeInDays, np.log10(b[:,1]))
  ax31.plot(cumulativeTimeInDays[nstep-1],np.log10(b[nstep-1,1]),'ro',markersize=10)
  ax31.set_xlabel('Time in Days')
  ax31.set_ylabel('Log10(Peak Slip Rate (m/s))')

  plt.savefig(fname + ".png", dpi = 600)
  plt.close()

  return (fig1,)

def plot_roughness(fname):
  a = xr.open_dataset(fname)
  #print (a)

  b1 = a.peak
  b2 = a.pypx
  b3 = a.pypz

  fig1 = plt.figure()
  plt.rc('font', size=SMALL_SIZE)

  ax11 = fig1.add_subplot(2,2,1)
  b1.plot()
  ax11.set_xlabel('')
  #ax11.set_ylabel('')

  ax12 = fig1.add_subplot(2,2,2)
  b2.plot()
  ax12.set_xlabel('')
  ax12.set_ylabel('')

  ax21 = fig1.add_subplot(2,2,3)
  b3.plot()
  #ax21.set_ylabel('')

  plt.savefig(fname + ".png", dpi = 600)
  plt.close()

  return (fig1,)

def tryint(s):
    try:
        return int(s)
    except:
        return s

def alphanum_key(s):
    return [tryint(c) for c in re.split('([0-9]+)', s)]

def sort_nicely(l):
    l.sort(key=alphanum_key, reverse=False)
    return l

def generate_gif():
  #images = []
  #dirFiles = []
  #for fname in os.listdir(os.getcwd()):
  #  name, file_extension = os.path.splitext(fname)
  #  if '.png' in file_extension:
  #    dirFiles += fname
  #print(dirFiles)
  #for fname in sorted(dirFiles):
  #  print(fname)
  #  images.append(imageio.imread(fname))
  #imageio.mimsave('on_fault_vars.gif',images)
  filenames = glob.glob('.//*.png')
  filenames = sort_nicely(filenames)
  with imageio.get_writer('./on_fault_vars.gif', mode='I') as writer:
      for filename in filenames:
          image = imageio.v2.imread(filename)
          #img = convert_from_path(filename)[0]
          #image = np.array(img.getdata(), np.uint8).reshape(img.size[1], img.size[0], 3)
          writer.append_data(image)

def seek_numbers_filename(x):
    return (x[6:10])

#dirFiles = os.listdir(os.getcwd())
def _main_func(description):
    dirFiles = list()
    for fname in os.listdir(os.getcwd()):
        name, file_extension = os.path.splitext(fname)
        if 'fault.' in name and '.nc' in file_extension and re.search(r'\.\d+',name):
            dirFiles += fname
            if os.path.exists(fname + '.png') == False: plot_fault(str(fname))
        if 'roughness' in name and '.nc' in file_extension:
            dirFiles += fname
            plot_roughness(str(fname))
    generate_gif()

if __name__ == "__main__":
    _main_func(__doc__)


